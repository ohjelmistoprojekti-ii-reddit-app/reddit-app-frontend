"use client";
import { useMemo, useState } from "react";
import type { CountryTopPost } from "@/types/map.types";

function isImageUrl(url: string) {
  return /\.(png|jpe?g|gif|webp|bmp|svg)$/i.test(url);
}

function trim(text: string, limit = 240) {
  if (!text) return "";
  if (text.length <= limit) return text;
  return text.slice(0, limit).trimEnd() + "‚Ä¶";
}

interface PostCardProps {
  post: CountryTopPost;
  index: number;
  showNavigation?: boolean;
  onPrev?: () => void;
  onNext?: () => void;
  currentIndex?: number;
  totalPosts?: number;
}

export default function PostCard({ 
  post, 
  index, 
  showNavigation = false,
  onPrev,
  onNext,
  currentIndex = 0,
  totalPosts = 1
}: PostCardProps) {

  const isEnglishOriginal = useMemo(() => {
    const lang = (post.lang || post.language || "").toLowerCase();
    return lang.startsWith("en") || lang.includes("english");
  }, [post]);

  const hasTranslation = Boolean(
    (post.title_eng && post.title_eng.trim()) || 
    (post.content_eng && post.content_eng.trim()) || 
    (post.comments_eng && post.comments_eng.length > 0)
  );

  const showTranslateButton = hasTranslation;
  const [showTranslation, setShowTranslation] = useState(false);
  const [expandedContent, setExpandedContent] = useState(false);
  const [showComments, setShowComments] = useState(false);

  const title = showTranslation && hasTranslation ? (post.title_eng ?? post.title) : post.title;
  const content = showTranslation && hasTranslation ? (post.content_eng ?? post.content) : post.content;
  const commentsArray = showTranslation && hasTranslation ? (post.comments_eng ?? post.comments) : post.comments;

  const showMoreContent = content && content.length > 240;
  const mediaAvailable = post.content_link && post.link && post.content_link !== post.link;

  return (
    <div className="bg-orange-50 rounded-2xl p-6">
      {/* Post Header */}
      <div className="bg-white rounded-xl p-4 mb-4">
        <div className="flex items-start justify-between mb-2">
          <div className="flex-1">
            <h3 className="text-lg font-semibold leading-snug break-words mb-2">
              {title}
            </h3>
            {showTranslateButton && (
              <button
                className="text-xs text-blue-600 hover:underline"
                onClick={() => setShowTranslation(v => !v)}
                title="Translations are generated by AI and may contain inaccuracies"
              >
                {showTranslation ? "See original" : "See translation"}
              </button>
            )}
          </div>
          {showNavigation && (
            <div className="text-xs text-gray-500 ml-4">
              {currentIndex + 1} / {totalPosts}
            </div>
          )}
        </div>

        {/* Media preview */}
        {mediaAvailable && (
          <div className="my-3">
            {isImageUrl(post.content_link!) ? (
              // eslint-disable-next-line @next/next/no-img-element
              <img
                src={post.content_link!}
                alt={title || "media"}
                className="w-full rounded-lg max-h-[360px] object-contain"
                loading="lazy"
              />
            ) : (
              <a
                href={post.content_link!}
                target="_blank"
                rel="noreferrer"
                className="inline-flex items-center gap-2 text-blue-600 underline text-sm"
              >
                Open media link
              </a>
            )}
          </div>
        )}

        {/* Content */}
        {content && (
          <div className="text-gray-800 leading-relaxed mb-3">
            <div className="whitespace-pre-wrap break-words text-sm">
              {expandedContent ? content : trim(content)}
            </div>
            {showMoreContent && (
              <button
                className="mt-2 text-blue-600 underline text-xs"
                onClick={() => setExpandedContent(v => !v)}
              >
                {expandedContent ? "Show less" : "Show more"}
              </button>
            )}
          </div>
        )}

        {/* Score and Link */}
        <div className="flex items-center justify-between pt-3 border-t">
          <span className="text-sm text-gray-600">
            Score: <span className="font-semibold">{post.score}</span>
          </span>
          {post.link && (
            <a
              href={post.link}
              target="_blank"
              rel="noreferrer"
              className="text-xs text-blue-600 hover:underline"
            >
              Open on Reddit
            </a>
          )}
        </div>
      </div>

      {/* Comments Section */}
      {commentsArray && commentsArray.length > 0 && (
        <div className="bg-white rounded-xl p-4">
          <button
            className="w-full flex items-center justify-between text-left"
            onClick={() => setShowComments(v => !v)}
          >
            <span className="text-sm font-medium text-gray-700">
              üí¨ Comments ({commentsArray.length})
            </span>
            <span className="text-gray-500">
              {showComments ? "‚ñ≤" : "‚ñº"}
            </span>
          </button>

          {showComments && (
            <div className="mt-4 space-y-3 max-h-[300px] overflow-y-auto">
              {commentsArray.map((comment, idx) => (
                <div 
                  key={idx}
                  className="text-sm text-gray-700 p-3 bg-gray-50 rounded-lg whitespace-pre-wrap break-words"
                >
                  {comment}
                </div>
              ))}
            </div>
          )}
        </div>
      )}

      {/* Navigation for posts */}
      {showNavigation && onPrev && onNext && totalPosts > 1 && (
        <div className="flex gap-3 mt-4">
          <button
            className="flex-1 py-2 px-4 bg-white hover:bg-gray-50 rounded-lg text-sm font-medium"
            onClick={onPrev}
          >
            ‚Üê Previous
          </button>
          <button
            className="flex-1 py-2 px-4 bg-white hover:bg-gray-50 rounded-lg text-sm font-medium"
            onClick={onNext}
          >
            Next ‚Üí
          </button>
        </div>
      )}
    </div>
  );
}